A.

There are two loops, each of which performs 1024 reads; therefore,
there are 2048 reads in total.

B.

The given cache parameters are C = 2048, E = 1, and B = 32.

S = C / (E * B)
  = 2048 / (1 * 32)
  = 64

s = log2(S)
  = log2(64)
  = 6

b = log2(B)
  = log2(32)
  = 5

The cache activity will proceed as follows:

1. Iteration i = 31, j = 31:
   0x1FF8 = 0b0001 1111 1111 1000: grid[31][31].x
   tag = 0b0 0011 = 3, set = 0b11 1111 = 63, block = 0b1 1000 = 24
   Miss, C[63][0] <- [grid[31][28], grid[31][29], grid[31][30], grid[31][31]]

2. Iteration i = 31, j = 30:
   0x1FF0 = 0b0001 1111 1111 0000: grid[31][30].x
   tag = 0b0 0011 = 3, set = 0b11 1111 = 63, block = 0b1 0000 = 16
   Hit!

3. Iteration i = 31, j = 29:
   0x1FE8 = 0b0001 1111 1110 1000: grid[31][29].x
   tag = 0b0 0011 = 3, set = 0b11 1111 = 63, block = 0b0 1000 = 8
   Hit!

4. Iteration i = 31, j = 28:
   0x1FE0 = 0b0001 1111 1110 0000: grid[31][29].x
   tag = 0b0 0011 = 3, set = 0b11 1111 = 63, block = 0b0 0000 = 0
   Hit!

5. Iteration i = 31, j = 27:
   0x1FD8 = 0b0001 1111 1101 1000: grid[31][27].x
   tag = 0b0001 1 = 3, set = 0b11 1110 = 62, block = 0b1 1000 = 24
   Miss, C[62][0] <- [grid[31][24], grid[31][25], grid[31][26], grid[31][27]]

As we can see, this pattern will repeat throughout this loop. The next
loop will have slightly different block offsets, but it will be
effectively the same, from the miss on the first iteration all the way
to the end. We conclude that the miss rate is 1:4, yielding a total of
2048 / 4 = 512 cache misses.

C.

As discussed in part B, the miss rate is 1/4 = 0.25.

Note: the solution says the 32 B cache can only hold 2 elements of grid,
yielding a different solution. That doesn't make sense; the
algae_position struct requires only 8 B, so the cache can hold 32 B / 8
B = 4 grid elements.
